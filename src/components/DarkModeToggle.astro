---
// Dark mode toggle component
---

<button
  id="darkModeToggle"
  class="fixed top-4 right-4 z-50 p-3 bg-white dark:bg-dark-900 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 border border-gray-200 dark:border-dark-700"
  aria-label="Toggle dark mode"
>
  <!-- Sun icon for light mode -->
  <svg
    id="sunIcon"
    class="w-6 h-6 text-yellow-500 hidden dark:block"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    ></path>
  </svg>
  
  <!-- Moon icon for dark mode -->
  <svg
    id="moonIcon"
    class="w-6 h-6 text-gray-700 block dark:hidden"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    ></path>
  </svg>
</button>

<script>
  // Dark mode toggle functionality
  function initDarkMode() {
    const toggle = document.getElementById('darkModeToggle');
    const sunIcon = document.getElementById('sunIcon');
    const moonIcon = document.getElementById('moonIcon');
    
    function updateIconVisibility() {
      const isDark = document.documentElement.classList.contains('dark');
      if (sunIcon && moonIcon) {
        sunIcon.classList.toggle('hidden', !isDark);
        moonIcon.classList.toggle('hidden', isDark);
        sunIcon.classList.toggle('block', isDark);
        moonIcon.classList.toggle('block', !isDark);
      }
    }
    
    // Check for saved theme preference or default to system preference
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const currentTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
    document.documentElement.classList.toggle('dark', currentTheme === 'dark');
    
    // Update icon visibility based on current theme
    updateIconVisibility();
    
    toggle?.addEventListener('click', () => {
      // Toggle dark mode
      document.documentElement.classList.toggle('dark');
      
      // Save preference
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Update icon visibility
      updateIconVisibility();
    });
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      // Only update if user hasn't set a preference
      if (!localStorage.getItem('theme')) {
        document.documentElement.classList.toggle('dark', e.matches);
        updateIconVisibility();
      }
    });
  }
  
      // Initialize when DOM is loaded
    if (typeof window !== 'undefined') {
      document.addEventListener('DOMContentLoaded', initDarkMode);
    }
</script> 